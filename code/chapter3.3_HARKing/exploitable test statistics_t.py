# In[ ]:

import pandas as pd
import numpy as np
import scipy.stats as stats
import scipy.special as special
import sys
import seaborn as sns
import matplotlib.pyplot as plt

test_statistic = np.arange(start=0,stop=64,step=0.001)
degf = np.arange(start=1, stop=31, step=1)
n = (len(test_statistic))
m = (len(degf))

p_one = np.array([[0.0]*m]*n)
p_two = np.array([[0.0]*m]*n)

print(m)
print(n)

# In[ ]:

for j in range(0,m):
    for i in range(0,n):
        p_one[i,j] = (1-stats.t.cdf(x=test_statistic[i], loc=0, scale=1, df=degf[j]))
        if test_statistic[i] > 0:
            p_two[i,j] = ((1-stats.t.cdf(x=test_statistic[i], loc=0, scale=1, df=degf[j]))*2)
        else:
            p_two[i,j] = stats.t.cdf(x=test_statistic[i], loc=0, scale=1, df=degf[j])*2  

# In[ ]:

p1_statistic = np.array([0.0]*m)
p2_statistic = np.array([0.0]*m)
statistic_diff = np.array([0.0]*m)
df = pd.DataFrame([p1_statistic,p2_statistic,statistic_diff], 
                  index=['p1_statistic', 'p2_statistic', 'statistic_diff'], 
                  columns=['df=1', 'df=2', 'df=3', 'df=4', 'df=5', 'df=6', 'df=7', 'df=8', 'df=9', 
                           'df=10', 'df=11', 'df=12', 'df=13', 'df=14', 'df=15', 'df=16', 'df=17', 
                           'df=18', 'df=19', 'df=20', 'df=21', 'df=22', 'df=23', 'df=24', 'df=25', 
                           'df=26', 'df=27', 'df=28', 'df=29', 'df=30']) 

# In[ ]:

for j in range(0,m):
    for i in range(0,n):
        if p_one[i-1,j] > 0.05 and p_one[i,j] < 0.05 or p_one[i,j] == 0.05:
            df.iloc[0,j] = i*0.001
for j in range(0,m):
    for i in range(0,n):   
        if p_two[i-1,j] > 0.05 and p_two[i,j] < 0.05 or p_two[i,j] == 0.05:
            df.iloc[1,j] = i*0.001
for j in range(0,m):
    df.iloc[2,j] = df.iloc[1,j]-df.iloc[0,j]  

# In[ ]:

df = np.around(df, decimals=8)
# for negative effect size use negative values. null distribution is symmetrical around 0
df.to_csv(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\data\t_results.csv')
df

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x = test_statistic, y = p_one[:,0], color='darkred', label='one-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_two[:,0], color='indianred', label='two-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_one[:,1], color='purple', label='one-tailed, df=2')
    sns.lineplot(x = test_statistic, y = p_two[:,1], color='magenta', label='two-tailed, df=2')
    sns.lineplot(x = test_statistic, y = p_one[:,9], color='green', label='one-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_two[:,9], color='springgreen', label='two-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_one[:,28], color='navy', label='one-tailed, df=29')
    sns.lineplot(x = test_statistic, y = p_two[:,28], color='blue', label='two-tailed, df=29')
    sns.lineplot(x = test_statistic, y = 0.05, color='black')
    g.set(xlim=(0,15), ylim=(0,0.15), xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot8.png')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x = test_statistic, y = p_one[:,0], color='darkred', label='one-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_two[:,0], color='indianred', label='two-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_one[:,1], color='purple', label='one-tailed, df=2')
    sns.lineplot(x = test_statistic, y = p_two[:,1], color='magenta', label='two-tailed, df=2')
    sns.lineplot(x = test_statistic, y = p_one[:,9], color='green', label='one-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_two[:,9], color='springgreen', label='two-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_one[:,28], color='navy', label='one-tailed, df=29')
    sns.lineplot(x = test_statistic, y = p_two[:,28], color='blue', label='two-tailed, df=29')
    sns.lineplot(x = test_statistic, y = 0.05, color='black')
    g.set(xlabel='test_statsitic', ylabel='p-value')

# In[ ]:

sns.lineplot(x= test_statistic, y=p_two[:,7])
sns.lineplot(x= test_statistic, y=(p_one[:,7]*2))
