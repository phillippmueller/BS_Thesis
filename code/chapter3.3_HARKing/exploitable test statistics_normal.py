# In[ ]:

import pandas as pd
import numpy as np
import scipy.stats as stats
import sys
import seaborn as sns
import matplotlib.pyplot as plt

test_statistic = np.arange(start=-4,stop=4,step=0.001)
n = (len(test_statistic))

decision_one = [0] * n
decision_two = [0] * n

#upper_one: one-sided critical value
#upper_two: two-sided critical value 
upper_one = stats.norm.ppf(loc=0, scale=1, q=0.95)
upper_two = stats.norm.ppf(loc=0, scale=1, q=0.975)
print(n)

# In[ ]:

mu = 0
scale = 1

P_one = np.array([0.0] * n)
P_two = np.array([0.0] * n)
Decision_one = np.array([0] * n) 
Decision_two = np.array([0] * n)

# In[ ]:

# compute p-values 
for i in range(0,n):
    P_one[i] = (1-stats.norm.cdf(x=test_statistic[i], loc=mu, scale=scale))
    if test_statistic[i] > 0:
        P_two[i] = ((1-stats.norm.cdf(x=test_statistic[i], loc=mu, scale=scale))*2)
    else:
        P_two[i] = stats.norm.cdf(x=test_statistic[i], loc=mu, scale=scale)*2  
# positive = 1
# negative = 0
    if(test_statistic[i] < upper_one):
        Decision_one[i] = 0
    else:
        Decision_one[i] = 1
    if (test_statistic[i] < upper_two):
        Decision_two[i] = 0
    else:
        Decision_two[i] = 1        

# In[ ]:

curve = stats.norm.pdf(test_statistic, loc=mu, scale=scale, )
with sns.axes_style('darkgrid'):
    g=sns.lineplot(x = test_statistic, y = P_two, color='navy', label='two-tailed p')
    sns.lineplot(x = test_statistic, y = P_one, color='orangered', label='right-tailed p')
    sns.lineplot(x = test_statistic, y = (P_one - P_two), color='mediumvioletred', label='difference in p')
    sns.lineplot(x = test_statistic, y = 0.05, color='limegreen', label='significance level')
    sns.lineplot(x = test_statistic, y = curve, color='dodgerblue', label='null distribution')
    g.legend(loc='upper right')
    g.set(xlabel='test statistic', ylabel='probability / density ')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot6.png')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x = test_statistic, y = P_two, color='navy', label='two-tailed p')
    sns.lineplot(x = test_statistic, y = P_one, color='orangered', label='right-tailed p')
    sns.lineplot(x = test_statistic, y = (P_one - P_two), color='mediumvioletred', label='difference in p')
    sns.lineplot(x = test_statistic, y = 0.05, color='limegreen', label='significance level')
    g.set(xlim=(1,3.5), ylim=(-0.1,0.1), xlabel='test statistic', ylabel='p-value')
    g.legend(loc='lower right')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot7.png')

# In[ ]:

for i in range(0,n):
    if P_one[i-1] > 0.05 and P_one[i] < 0.05 or P_one[i] == 0.05:
        print(f't={test_statistic[i]}, p1={P_one[i]}, p2={P_two[i]}')
        print(f'iteration={i}')
    if P_two[i-1] > 0.05 and P_two[i] < 0.05 or P_two[i] == 0.05:
        print(f't={test_statistic[i]}, p1={P_one[i]}, p2={P_two[i]}')
        print(f'iteration={i}')

# In[ ]:

print(test_statistic[7000])
print(P_two[7000]-P_one[7000])

# In[ ]:

# compute probability of acchieving vague hypothesis:
(stats.norm.cdf(x=test_statistic[5960])-stats.norm.cdf(x=test_statistic[5645]))*2

# In[ ]:

# testing findings from exploratory analyisis in chapter7: p-hacking demonstration
for i in range(n):
    if test_statistic[i-1] < 2.1533905454694775 and test_statistic[i] >= 2.1533905454694775:
        print(i)
        print(test_statistic[i])
        print(P_two[i])
        print(P_one[i])
