# In[ ]:

import pandas as pd
import numpy as np
import scipy.stats as stats
import scipy.special as special
import sys
import seaborn as sns
import matplotlib.pyplot as plt

test_statistic = np.arange(start=0,stop=50,step=0.001)
degf = np.arange(start=1, stop=31, step=1)
n = (len(test_statistic))
m = (len(degf))

#upper_one: one-sided critical value
#upper_two: two-sided critical value 
upper_one = np.array([0.0]*m)
upper_two = np.array([0.0]*m)

p_one = np.array([[0.0]*m]*n)
p_two = np.array([[0.0]*m]*n)

print(m)
print(n)

# In[ ]:

for j in range(0,m):
    upper_one[j] = stats.chi2.ppf(df=degf[j], q=0.95)
    upper_two[j] = stats.chi2.ppf(df=degf[j], q=0.975)
    for i in range(0,n):
        p_one[i,j] = (1-stats.chi2.cdf(x=test_statistic[i], df=degf[j]))
        if test_statistic[i] > stats.chi2.ppf(q=0.5,df=degf[j]): #Expected value =df
            p_two[i,j] = ((1-stats.chi2.cdf(x=test_statistic[i], df=degf[j]))*2)
        else:
            p_two[i,j] = stats.chi2.cdf(x=test_statistic[i], df=degf[j])*2  

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x = test_statistic, y = p_one[:,0], color='darkred', label='one-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_two[:,0], color='indianred', label='two-tailed, df=1')
    sns.lineplot(x = test_statistic, y = p_one[:,9], color='purple', label='one-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_two[:,9], color='magenta', label='two-tailed, df=10')
    sns.lineplot(x = test_statistic, y = p_one[:,19], color='green', label='one-tailed, df=20')
    sns.lineplot(x = test_statistic, y = p_two[:,19], color='springgreen', label='two-tailed, df=20')
    sns.lineplot(x = test_statistic, y = p_one[:,29], color='navy', label='one-tailed, df=30')
    sns.lineplot(x = test_statistic, y = p_two[:,29], color='blue', label='two-tailed, df=30')
    sns.lineplot(x = test_statistic, y = 0.05, color='black', label='significance level')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot9.png')

# In[ ]:

with sns.axes_style('darkgrid'):
   g = sns.lineplot(x = test_statistic, y = p_one[:,0], color='darkred', label='one-tailed, df=1')
   sns.lineplot(x = test_statistic, y = p_two[:,0], color='indianred', label='two-tailed, df=1')
   sns.lineplot(x = test_statistic, y = p_one[:,9], color='purple', label='one-tailed, df=10')
   sns.lineplot(x = test_statistic, y = p_two[:,9], color='magenta', label='two-tailed, df=10')
   sns.lineplot(x = test_statistic, y = p_one[:,19], color='green', label='one-tailed, df=20')
   sns.lineplot(x = test_statistic, y = p_two[:,19], color='springgreen', label='two-tailed, df=20')
   sns.lineplot(x = test_statistic, y = p_one[:,29], color='navy', label='one-tailed, df=30')
   sns.lineplot(x = test_statistic, y = p_two[:,29], color='blue', label='two-tailed, df=30')
   sns.lineplot(x = test_statistic, y = 0.05, color='black')
   g.set(xlabel='test statistic', ylabel='p-value',xlim=(0,60), ylim=(0,0.1))

# In[ ]:

p1_statistic = np.array([0.0]*m)
p2_statistic = np.array([0.0]*m)
statistic_diff = np.array([0.0]*m)
df = pd.DataFrame([p1_statistic,p2_statistic,statistic_diff], 
                  index=['p1_statistic', 'p2_statistic', 'statistic_diff'], 
                  columns=['df=1', 'df=2', 'df=3', 'df=4', 'df=5', 'df=6', 'df=7', 'df=8', 'df=9', 
                           'df=10', 'df=11', 'df=12', 'df=13', 'df=14', 'df=15', 'df=16', 'df=17', 
                           'df=18', 'df=19', 'df=20', 'df=21', 'df=22', 'df=23', 'df=24', 'df=25', 
                           'df=26', 'df=27', 'df=28', 'df=29', 'df=30']) 

# In[ ]:

for j in range(0,m):
    for i in range(0,n):
        if p_one[i-1,j] > 0.05 and p_one[i,j] < 0.05 or p_one[i,j] == 0.05:
            df.iloc[0,j] = i*0.001
for j in range(0,m):
    for i in range(0,n):   
        if p_two[i-1,j] > 0.05 and p_two[i,j] < 0.05 or p_two[i,j] == 0.05:
            df.iloc[1,j] = i*0.001
for j in range(0,m):
    df.iloc[2,j] = df.iloc[1,j]-df.iloc[0,j]  

# In[ ]:

df = np.around(df, decimals=8)
df.to_csv(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\data\chi_results.csv')
df

# In[ ]:

sns.lineplot(x = test_statistic, y = (p_one[:,29]*2*0.01), color='navy', label='one-tailed, df=30')
sns.lineplot(x = test_statistic, y = (p_two[:,29]*0.01), color='blue', label='two-tailed, df=30')
sns.lineplot(x = test_statistic, y = stats.chi2.pdf(x=test_statistic, df=30))

# In[ ]:

sns.lineplot(x = test_statistic, y = (p_one[:,9]*2), color='navy', label='one-tailed, df=30')
sns.lineplot(x = test_statistic, y = p_two[:,9], color='blue', label='two-tailed, df=30')
sns.lineplot(x = test_statistic, y = stats.chi2.pdf(x=test_statistic, df=10))
