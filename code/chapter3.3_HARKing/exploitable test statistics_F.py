# In[ ]:

from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import scipy.stats as stats
import sys
np.set_printoptions(threshold=sys.maxsize)

degf_n = np.arange(start=1, stop=31, step=1)
degf_d = np.arange(start=1, stop=31, step=1)
test_statistic = np.arange(start=1,stop=50,step=0.1)
length = (len(test_statistic))
N = (len(degf_n))
D = (len(degf_d))
# N = D required!
p_one = np.array([[[0.0]*length]*D]*N)
p_two = np.array([[[0.0]*length]*D]*N)

# In[ ]:

for n in range(0,N):
    for d in range(0,D):
        for i in range(0,length):
            p_one[n,d,i] = (1-stats.f.cdf(x=test_statistic[i], dfn=degf_n[n], dfd=degf_d[d]))
            if test_statistic[i] > stats.f.ppf(q=0.5,dfn=degf_n[n], dfd=degf_d[d]):
                p_two[n,d,i] = (1-stats.f.cdf(x=test_statistic[i], dfn=degf_n[n], dfd=degf_d[d]))*2
            else:
                p_two[n,d,i] = (stats.f.cdf(x=test_statistic[i], dfn=degf_n[n], dfd=degf_d[d]))*2

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x=test_statistic, y=p_one[0,0,:], color='orangered', label='p1, df=(1,1)')

    sns.lineplot(x=test_statistic, y=p_one[1,1,:], color='skyblue', label='p1, df=(2,2)')
    sns.lineplot(x=test_statistic, y=p_one[2,2,:], color='dodgerblue', label='p1, df=(3,3)')
    sns.lineplot(x=test_statistic, y=p_one[3,3,:], color='navy', label='p1, df=(4,4)')

    sns.lineplot(x=test_statistic, y=p_one[9,9,:], color='lightgrey', label='p1, df=(10,10)')
    sns.lineplot(x=test_statistic, y=p_one[19,19,:], color='grey', label='p1, df=(20,20)')
    sns.lineplot(x=test_statistic, y=p_one[29,29,:], color='black', label='p1, df=(30,30)')          

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen', label='significance level')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot10.png')

# In[ ]:

sns.lineplot(x=test_statistic, y=p_two[1,1,:])
sns.lineplot(x=test_statistic, y=(p_one[1,1,:]*2))

sns.lineplot(x=test_statistic, y=p_two[12,12,:])
sns.lineplot(x=test_statistic, y=(p_one[12,12,:]*2))

sns.lineplot(x=test_statistic, y=p_two[29,29,:])
sns.lineplot(x=test_statistic, y=(p_one[29,29,:]*2))

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x=test_statistic, y=p_two[0,0,:], color='orangered', label='p2, df=(1,1)')

    sns.lineplot(x=test_statistic, y=p_two[1,1,:], color='skyblue', label='p2, df=(2,2)')
    sns.lineplot(x=test_statistic, y=p_two[2,2,:], color='dodgerblue', label='p2, df=(3,3)')
    sns.lineplot(x=test_statistic, y=p_two[3,3,:], color='navy', label='p2, df=(4,4)')

    sns.lineplot(x=test_statistic, y=p_two[9,9,:], color='lightgrey', label='p2, df=(10,10)')
    sns.lineplot(x=test_statistic, y=p_two[19,19,:], color='grey', label='p2, df=(20,20)')
    sns.lineplot(x=test_statistic, y=p_two[29,29,:], color='black', label='p2, df=(30,30)')          

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen', label='significance level')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot11.png')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x=test_statistic, y=p_one[1,0,:], color='salmon', label='p1, df=(2,1)')
    sns.lineplot(x=test_statistic, y=p_one[2,0,:], color='orangered', label='p1, df=(3,1)')
    sns.lineplot(x=test_statistic, y=p_one[29,0,:], color='firebrick', label='p1, df=(30,1)')

    sns.lineplot(x=test_statistic, y=p_one[0,1,:], color='skyblue', label='p1, df=(1,2)')
    sns.lineplot(x=test_statistic, y=p_one[0,2,:], color='dodgerblue', label='p1, df=(1,3)')
    sns.lineplot(x=test_statistic, y=p_one[0,29,:], color='navy', label='p1, df=(1,30)')

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen',label='significance level')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot12.png')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x=test_statistic, y=p_two[1,0,:], color='salmon', label='p2, df=(2,1)')
    sns.lineplot(x=test_statistic, y=p_two[2,0,:], color='orangered', label='p2, df=(3,1)')
    sns.lineplot(x=test_statistic, y=p_two[29,0,:], color='firebrick', label='p2, df=(30,1)')

    sns.lineplot(x=test_statistic, y=p_two[0,1,:], color='skyblue', label='p2, df=(1,2)')
    sns.lineplot(x=test_statistic, y=p_two[0,2,:], color='dodgerblue', label='p2, df=(1,3)')
    sns.lineplot(x=test_statistic, y=p_two[0,29,:], color='navy', label='p2, df=(1,30)')

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen', label='significance level')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot13.png')

# In[ ]:

g = sns.lineplot(x=test_statistic, y=p_one[9,0,:], color='salmon', label='p1, df=(10,1)')
sns.lineplot(x=test_statistic, y=p_one[19,0,:], color='orangered', label='p1, df=(20,1)')
sns.lineplot(x=test_statistic, y=p_one[29,0,:], color='firebrick', label='p1, df=(30,1)')

sns.lineplot(x=test_statistic, y=p_two[0,9,:], color='skyblue', label='p2, df=(1,10)')
sns.lineplot(x=test_statistic, y=p_two[0,19,:], color='dodgerblue', label='p2, df=(1,20)')
sns.lineplot(x=test_statistic, y=p_two[0,29,:], color='navy', label='p2, df=(1,30)')

sns.lineplot(x=test_statistic, y=0.05, color='black', label='alpha = 0.05')
g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.lineplot(x=test_statistic, y=p_one[1,1,:], color='salmon', label='p1, df=(2,2)')
    sns.lineplot(x=test_statistic, y=p_one[3,1,:], color='orangered', label='p1, df=(4,2)')
    sns.lineplot(x=test_statistic, y=p_one[29,1,:], color='firebrick', label='p1, df=(30,2)')

    sns.lineplot(x=test_statistic, y=p_one[1,2,:], color='skyblue', label='p1, df=(2,3)')
    sns.lineplot(x=test_statistic, y=p_one[3,2,:], color='dodgerblue', label='p1, df=(4,3)')
    sns.lineplot(x=test_statistic, y=p_one[29,2,:], color='navy', label='p1, df=(30,3)')

    sns.lineplot(x=test_statistic, y=p_one[1,4,:], color='lightgrey', label='p1, df=(2,5)')
    sns.lineplot(x=test_statistic, y=p_one[3,4,:], color='grey', label='p1, df=(4,5)')
    sns.lineplot(x=test_statistic, y=p_one[29,4,:], color='black', label='p1, df=(30,5)')

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen',label='significance level')
    g.set(xlim=(0,15), ylim=(0.02, 0.3), xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot14.png')

# In[ ]:

g = sns.lineplot(x=test_statistic, y=p_two[1,1,:], color='orange', label='p2, df=(2,2)')
sns.lineplot(x=test_statistic, y=p_two[3,1,:], color='red', label='p2, df=(4,2)')
sns.lineplot(x=test_statistic, y=p_two[29,1,:], color='firebrick', label='p1, df=(30,2)')

sns.lineplot(x=test_statistic, y=p_two[1,2,:], color='cyan', label='p2, df=(2,3)')
sns.lineplot(x=test_statistic, y=p_two[3,2,:], color='blue', label='p2, df=(4,3)')
sns.lineplot(x=test_statistic, y=p_two[29,2,:], color='navy', label='p2, df=(30,3)')

sns.lineplot(x=test_statistic, y=p_two[1,4,:], color='springgreen', label='p2, df=(2,5)')
sns.lineplot(x=test_statistic, y=p_two[3,4,:], color='green', label='p2, df=(4,5)')
sns.lineplot(x=test_statistic, y=p_two[29,4,:], color='darkolivegreen', label='p2, df=(30,5)')

sns.lineplot(x=test_statistic, y=0.05, color='black',label='alpha = 0.05')

g.set(xlim=(2,30), ylim=(0.02, 0.3), xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('darkgrid'):    
    g = sns.lineplot(x=test_statistic, y=p_one[1,1,:], color='salmon', label='p1, df=(2,2)')
    sns.lineplot(x=test_statistic, y=p_one[1,3,:], color='orangered', label='p1, df=(2,4)')
    sns.lineplot(x=test_statistic, y=p_one[1,29,:], color='firebrick', label='p1, df=(2,30)')

    sns.lineplot(x=test_statistic, y=p_one[2,1,:], color='skyblue', label='p1, df=(3,2)')
    sns.lineplot(x=test_statistic, y=p_one[2,3,:], color='dodgerblue', label='p1, df=(3,4)')
    sns.lineplot(x=test_statistic, y=p_one[2,29,:], color='navy', label='p1, df=(3,30)')

    sns.lineplot(x=test_statistic, y=p_one[4,1,:], color='lightgrey', label='p1, df=(5,2)')
    sns.lineplot(x=test_statistic, y=p_one[4,3,:], color='grey', label='p1, df=(5,4)')
    sns.lineplot(x=test_statistic, y=p_one[4,29,:], color='black', label='p1, df=(5,30)')

    sns.lineplot(x=test_statistic, y=0.05, color='limegreen',label='significance level')
    g.set(xlim=(0,15), ylim=(0.02, 0.3), xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot15.png')

# In[ ]:

g = sns.lineplot(x=test_statistic, y=p_two[1,1,:], color='orange', label='p2, df=(2,2)')
sns.lineplot(x=test_statistic, y=p_two[1,3,:], color='red', label='p2, df=(2,4)')
sns.lineplot(x=test_statistic, y=p_two[1,29,:], color='firebrick', label='p2, df=(2,30)')

sns.lineplot(x=test_statistic, y=p_two[2,1,:], color='cyan', label='p2, df=(3,2)')
sns.lineplot(x=test_statistic, y=p_two[2,3,:], color='blue', label='p2, df=(3,4)')
sns.lineplot(x=test_statistic, y=p_two[2,29,:], color='navy', label='p2, df=(3,30)')

sns.lineplot(x=test_statistic, y=p_two[4,1,:], color='springgreen', label='p2, df=(5,2)')
sns.lineplot(x=test_statistic, y=p_two[4,3,:], color='lightgreen', label='p2, df=(5,4)')
sns.lineplot(x=test_statistic, y=p_two[4,29,:], color='darkolivegreen', label='p2, df=(5,30)')

sns.lineplot(x=test_statistic, y=0.05, color='black',label='alpha = 0.05')

g.set(xlim=(2,20), ylim=(0.02, 0.3), xlabel='test statistic', ylabel='p-value')

# In[ ]:

p1array = np.array([[0.0]*D]*N)
p2array = np.array([[0.0]*D]*N)
t1array = np.array([[0.0]*D]*N)
t2array = np.array([[0.0]*D]*N)
p1p2array = np.array([[0.0]*D]*N)
p2p1array = np.array([[0.0]*D]*N)

p1array[:] = np.NaN
p2array[:] = np.NaN
t1array[:] = np.NaN
t2array[:] = np.NaN
p1p2array[:] = np.NaN
p2p1array[:] = np.NaN

p1 = np.array([0.0]*N*D) 
p2 = np.array([0.0]*N*D)
t_p1 = np.array([0.0]*N*D)
t_p2 = np.array([0.0]*N*D)
p1_at_p2 = np.array([0.0]*N*D)
p2_at_p1 = np.array([0.0]*N*D)
tdiff = np.array([0.0]*N*D)
p1diff = np.array([0.0]*N*D)
p2diff = np.array([0.0]*N*D)

# In[ ]:

for n in range(0,N):
    for d in range(0,D):
        for i in range(0,length):
            if p_one[n,d,i-1,] > 0.05 and p_one[n,d,i] < 0.05 or p_one[n,d,i] == 0.05:
                p1array[n,d] = p_one[n,d,i]
                t1array[n,d] = i * 0.1
                p2p1array[n,d] = p_two[n,d,i]
            if p_two[n,d,i-1] > 0.05 and p_two[n,d,i] < 0.05 or p_two[n,d,i] == 0.05:
                p2array[n,d] = p_two[n,d,i]
                t2array[n,d] = i * 0.1
                p1p2array[n,d] = p_one[n,d,i]
# translate data into vector for dataframes 
# single_df for 30x30 grid
# multiple_df for 3X3 grid
# final_df for table in appendix
for i in range(0,N):
    p1[i*N:(i+1)*N] = p1array[i,:]
    p2[i*N:(i+1)*N] = p2array[i,:]
    t_p1[i*N:(i+1)*N] = t1array[i,:]
    t_p2[i*N:(i+1)*N] = t2array[i,:]
    p1_at_p2[i*N:(i+1)*N] = p1p2array[i,:]
    p2_at_p1[i*N:(i+1)*N] = p2p1array[i,:]

# In[ ]:

tdiff = t_p2 - t_p1
p1diff = p2_at_p1 - p1
p2diff = p2 - p1_at_p2

# 2d dataframes for plots and heatmaps 
df_p1 = pd.DataFrame(p1array, index=degf_n, columns=degf_d)
df_p2 = pd.DataFrame(p2array, index=degf_n, columns=degf_d)
df_p1p2 = pd.DataFrame(p1p2array, index=degf_n, columns=degf_d)
df_p2p1 = pd.DataFrame(p2p1array, index=degf_n, columns=degf_d)
df_t1 = pd.DataFrame(t1array, index=degf_n, columns=degf_d)
df_t2 = pd.DataFrame(t2array, index=degf_n, columns=degf_d)

# In[ ]:

sns.heatmap(df_p1p2)

# In[ ]:

sns.heatmap(df_p1,cmap='flare')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot18.png')

# In[ ]:

sns.heatmap(df_p2p1)

# In[ ]:

sns.heatmap(df_p2)

# In[ ]:

sns.heatmap(df_t2.iloc[0:10,0:10]-df_t1.iloc[0:10,0:10], cmap='flare')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot16.png')

# In[ ]:

# list all df for dataframe 
df1 = np.array([0]*N**2)
df2 = np.array([0]*N)
help2 = np.array([0]*N)

for i in range(0,N):
    df2[i] = i+1
    help2[i] = i+1
for i in range(0,N):
    df2 = np.concatenate((df2,help2),axis=0)

#jumps of 10 in df, for second multi-grid plot (multiple_df)
df2_10 = np.array([0]*N)
help_10 = np.array([0]*N)
df1_10 = np.array([0]*N**2)
for i in range(0,N):
    for j in range(0,10):
        df2_10[i*10:(i+1)*10] = i*10
        help_10[i*10:(i+1)*10] = i*10
for i in range(0,10):
    df2_10[i] = 1
    help_10[i] =1
for i in range(0,N-1):
    df2_10 = np.concatenate((df2_10, help_10), axis=0)
for i in range(0,N**2):
    for j in range(0,10*N):
        df1_10[i*10*N:(i+1)*10*N] = i*10
for i in range(0,10*N):
    df1_10[i] = 1

# In[ ]:

# 1d dataframe for multi-grids
# single_df
data = pd.DataFrame([df1,df2,p1,t_p1,p2_at_p1,p2,t_p2,p1_at_p2], 
                    index=['df1','df2','p1','t:p1=5%','p2:p1=5%','p2','t:p2=5%','p1:p2=5%'])
df = data.transpose()
# delete zeros in df1 vector 
for i in range(0,N**2):
    df.iloc[(i*N):((i+1)*N),0] = i+1  
#create index list, based on (df1,df2)
list1 = df.iloc[:,0].astype(int)
list2 = df.iloc[:,1].astype(int)
list_delimiter = [',']*len(df.iloc[:,0])                    
list_final = list1.astype(str) + list_delimiter + list2.astype(str)
df.index = list_final
single_df = df.dropna()

# In[ ]:

# multiple_df
data = pd.DataFrame([df1_10,df2_10,df1,df2,p1,t_p1,p2_at_p1,p2,t_p2,p1_at_p2], 
                           index=['df1_10','df2_10','df1','df2','p1','t:p1=5%','p2:p1=5%','p2','t:p2=5%','p1:p2=5%'])
multiple_df = data.transpose()
# delete zeros in df1 vector 
for i in range(0,N**2):
    multiple_df.iloc[(i*N):((i+1)*N),2] = i+1  
multiple_df.index = list_final

# In[ ]:

# final_df
data = pd.DataFrame([df1, df2, t_p1, t_p2, tdiff, p1, p2_at_p1, p1diff, p2, p1_at_p2, p2diff], 
                    index=['df1','df2','t at p1=5%', 't at p2=5%', 't interval', 'p1', 'p2 at p1=5%', 'delta p at p1=5%', 
                           'p2', 'p1 at p2=5%', 'delta p at p2=5%'])
df = data.transpose()
# delete zeros in df1 vector 
for i in range(0,N**2):
    df.iloc[(i*N):((i+1)*N),0] = i+1  
df.index = list_final
first_df = df.dropna()
second_df = first_df.drop(columns=['df1','df2'])
final_df = second_df.round(decimals=4)
final_df.to_csv(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\data\F_results.csv')

# In[ ]:

with sns.axes_style('darkgrid'):
    g = sns.FacetGrid(data=multiple_df, col='df2_10', row='df1_10')
    g.map(sns.lineplot,'t:p1=5%', 'p1', color='dodgerblue')
    g.map(sns.lineplot,'t:p1=5%', 'p2:p1=5%', color='navy')
    g.map(sns.lineplot,'t:p2=5%', 'p2', color='orangered')
    g.map(sns.lineplot,'t:p2=5%', 'p1:p2=5%', color='firebrick')
    g.set(xlabel='test statistic', ylabel='p-value')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot17.png')

# In[ ]:

IndexNames1 = single_df[single_df['df2'] > 10].index
help_df = single_df.drop(IndexNames1)
IndexNames2 = help_df[help_df['df1'] > 10].index
df_1_1 = help_df.drop(IndexNames2)
IndexNames1 = single_df[single_df['df2'] <= 10].index
help_df = single_df.drop(IndexNames1)
IndexNames2 = help_df[help_df['df1'] > 10].index
df_11to30 = help_df.drop(IndexNames2)
IndexNames1 = df_11to30[df_11to30['df2'] > 20].index
df_1_2 = df_11to30.drop(IndexNames1)
IndexNames1 = df_11to30[df_11to30['df2'] < 21].index
df_1_3 = df_11to30.drop(IndexNames1)

# In[ ]:

IndexNames = single_df[single_df['df1'] <= 10].index
help_df = single_df.drop(IndexNames)
IndexNames2 = help_df[help_df['df2'] > 10].index
df_11to30 = help_df.drop(IndexNames2)
IndexNames = df_11to30[df_11to30['df1'] > 20 ].index
df_2_1 = df_11to30.drop(IndexNames)
IndexNames = df_11to30[df_11to30['df1'] < 20 ].index
df_3_1 = df_11to30.drop(IndexNames)

# In[ ]:

with sns.axes_style('whitegrid'):
    g = sns.FacetGrid(data=df_1_1, col='df2', row='df1')
    g.map(sns.scatterplot,'t:p1=5%', 'p1', color='orangered', label='p1=5%')
    g.map(sns.scatterplot,'t:p1=5%', 'p2:p1=5%', color='navy', label='p2 at p1=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p2', color='blue', label='p2=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p1:p2=5%', color='firebrick', label='p1 at p2=5%')
    g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('whitegrid'):
    g = sns.FacetGrid(data=df_1_2, col='df2', row='df1')
    g.map(sns.scatterplot,'t:p1=5%', 'p1', color='orangered', label='p1=5%')
    g.map(sns.scatterplot,'t:p1=5%', 'p2:p1=5%', color='navy', label='p2 at p1=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p2', color='blue', label='p2=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p1:p2=5%', color='firebrick', label='p1 at p2=5%')
    g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('whitegrid'):
    g = sns.FacetGrid(data=df_1_3, col='df2', row='df1')
    g.map(sns.scatterplot,'t:p1=5%', 'p1', color='orangered', label='p1=5%')
    g.map(sns.scatterplot,'t:p1=5%', 'p2:p1=5%', color='navy', label='p2 at p1=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p2', color='blue', label='p2=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p1:p2=5%', color='firebrick', label='p1 at p2=5%')
    g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('whitegrid'):
    g = sns.FacetGrid(data=df_2_1, col='df2', row='df1')
    g.map(sns.scatterplot,'t:p1=5%', 'p1', color='orangered', label='p1=5%')
    g.map(sns.scatterplot,'t:p1=5%', 'p2:p1=5%', color='navy', label='p2 at p1=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p2', color='blue', label='p2=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p1:p2=5%', color='firebrick', label='p1 at p2=5%')
    g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

with sns.axes_style('whitegrid'):
    g = sns.FacetGrid(data=df_3_1, col='df2', row='df1')
    g.map(sns.scatterplot,'t:p1=5%', 'p1', color='orangered', label='p1=5%')
    g.map(sns.scatterplot,'t:p1=5%', 'p2:p1=5%', color='navy', label='p2 at p1=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p2', color='blue', label='p2=5%')
    g.map(sns.scatterplot,'t:p2=5%', 'p1:p2=5%', color='firebrick', label='p1 at p2=5%')
    g.set(xlabel='test statistic', ylabel='p-value')

# In[ ]:

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot_trisurf(single_df['df1'], single_df['df2'], single_df['t:p1=5%'], cmap='flare')
# ax.plot_trisurf(single_df['df1'], single_df['df2'], single_df['t:p2=5%'], cmap='flare')

surf = ax.plot_trisurf(single_df['df1'], single_df['df2'], single_df['t:p1=5%'], cmap='rocket')
fig.colorbar(surf, shrink=0.7)
ax.view_init(30,45)
ax.set(xlabel='df1', ylabel='df2', zlabel='t')

# In[ ]:

with sns.axes_style('whitegrid'):
    fig = plt.figure()
    ax = Axes3D(fig)
    ax.scatter(df_1_1['df1'], df_1_1['df2'], df_1_1['t:p1=5%'], color='navy', label='t at p1 significant')
    ax.scatter(df_1_1['df1'], df_1_1['df2'], df_1_1['t:p2=5%'], color='orangered')
    ax.view_init(0,15)
    ax.set(xlabel='df1', ylabel='df2', zlabel='test statistic')
plt.savefig(r'C:\Users\phili\OneDrive\Dokumente_One Drive\KIT\Bachelorarbeit\plots\chapter5\plot19.white.png')
